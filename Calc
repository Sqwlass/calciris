from argparse import Пространство имен
из .. импортировать загрузчик, утилиты
импортировать asyncio, pytz, re, телемарафон
из telethon.tl.types импортировать MessageEntityTextUrl
импортировать json как JSON
из даты и времени импортировать дату и время, дату, время
импортировать telethon.events как события
импортировать случайный
строка импорта
импорт гуманизировать
импортировать математику


клиент = 0;
данные класса:
 ID_владельца = 5089358584

команды класса:

 async def calc(сообщение, способность, fromlvl, tolvl):
  """Калькулятор"""
  если int(fromlvl) >= int(tolvl) или int(fromlvl) < 0 или int(tolvl) < 0: return;

  новое_сообщение, способность_строка, цена = "", "", 0;

  для i в диапазоне (int (fromlvl), int (tolvl)):
   способность соответствия:
    регистр ("заразность"|"зараз"|"зз"):
     цена += (i + 1)**2,5;
     Ability_string = "✅ Усиление заразности патогена";
    случай ("иммунитет"|"иммун"|"имун"):
     цена += (i + 1)**2,45;
     Ability_string = "✅ У крепления защиты";
    падеж ("летальность"|"летал"|"леталка"):
     цена += (i + 1)**1,95;
     Ability_string = "🗓 Усиление летальности патогена";
    падеж ("квалификация"|"квала"|"скорость"):
     цена += (i + 1)**2,6;
     Ability_string = "✅ Ускорение производства патогена";
    падеж ("патогены"|"паты"|"патоген"|"пат"):
     цена += (i + 1)**2;
     Ability_string = "🗓 Увеличение количества клеток с патогеном";
    case ("безопасность"|"сб"|"служба"):
     цена += (i + 1)**2,1;
     Ability_string = "✅ У крепления службы безопасности";
    случай _:
     возвращаться;

  цена = ул (целое (цена));
  new_message = Ability_string + " на " + str(int(tolvl) - int(fromlvl))+ " ур (до " + tolvl + ")\n";
  new_message += "🧬 Цена: " + str(humanize.intcomma(price)).replace(",", ".") + "био-ресурсов";
  ждать сообщения.ответ(новое_сообщение);


класс CalcMod(загрузчик.Модуль):
 'Показывает, сколько необходимо био-опыта для улучшения.\n Используй: Калькулятор (аргумент) (от) (до).\nАргументы:\nзаразность|зараз|зз\nиммунитет|иммун\nквалификация|квала|скорость\nпатогены|паты|патогены |пат\nбезопасность|сб|служба'
 strings = {"имя": "Калькулятор"};

 наблюдатель асинхронного определения (я, сообщение):
  если не isinstance(сообщение, telethon.tl.types.Message): return;
  автор, контент = ожидание сообщения.get_sender(), сообщение.сообщение;

  если author.id != data.owner_id: возврат

  части = содержание.split(" ");
  команда = части[0];
  команда соответствия:
   чехол "Калькулятор":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   чехол "калькулятор":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   падеж "калк":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   чехол "Калк":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   случай "расчет":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   чехол "Расч":
    await commands.calc(сообщение, части[1], части[2], части[3]);
   падеж "кал":
    await commands.calc(сообщение, части[1], части[2], части[3]);
